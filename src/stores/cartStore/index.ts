// src/stores/cart.ts

import { ref, computed } from 'vue'
import { defineStore } from 'pinia'
import { mockConfig } from '@/data/mockData'
import type { Product, CartItem, OrderDetail } from '@/entities/product'

// Utility function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•)
const formatCurrency = (amount: number): string => {
  return amount.toFixed(2)
}

export const useCartStore = defineStore('cart', () => {
  const items = ref<CartItem[]>([])
  const promotionCode = ref('')
  const appliedDiscount = ref(0)
  const completedOrder = ref<OrderDetail | null>(null)

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  function addToCart(product: Product) {
    const existingItem = items.value.find((item) => item.sku === product.sku)

    if (existingItem) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì 1 ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      updateQuantity(product.sku, existingItem.quantity + 1)
    } else {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
      items.value.push({
        ...product,
        quantity: 1,
        total_item_price: product.price * 1,
      })
    }
    console.log(`Product SKU ${product.sku} added to cart.`)
  }

  /**
   * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (Min 1, Max 999)
   */
  function updateQuantity(sku: number, newQuantity: number) {
    const item = items.value.find((i) => i.sku === sku)

    if (item) {
      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 1 ‡∏ñ‡∏∂‡∏á 999
      const clampedQty = Math.max(1, Math.min(999, newQuantity))
      item.quantity = clampedQty
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡πÉ‡∏´‡∏°‡πà
      item.total_item_price = item.price * clampedQty
    }
  }

  /**
   * ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
   */
  function removeFromCart(sku: number) {
    items.value = items.value.filter((item) => item.sku !== sku)
    // üí° Note: ‡πÉ‡∏ô production, ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Notification Service ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏ó‡∏ô alert
    console.log(`Product SKU ${sku} removed from cart.`)
  }

  /**
   * ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
   */
  function applyPromotion() {
    if (promotionCode.value.toUpperCase() === mockConfig.config.promotion.discount_code) {
      appliedDiscount.value = mockConfig.config.promotion.discount_amount
      return true
    } else {
      appliedDiscount.value = 0
      return false
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Cart ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô Order
  function createOrder(orderId: string): OrderDetail {
    const order: OrderDetail = {
      orderId,
      items: JSON.parse(JSON.stringify(items.value)), // Deep copy items
      subTotal: subTotal.value,
      finalDiscount: finalDiscount.value,
      deliveryFee: deliveryFee.value,
      finalTotalAmount: finalTotalAmount.value,
      createdAt: Date.now(),
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Order
    localStorage.setItem(`order-${orderId}`, JSON.stringify(order))

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Cart (‡πÄ‡∏°‡∏∑‡πà‡∏≠ Checkout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    items.value = []
    promotionCode.value = ''
    appliedDiscount.value = 0
    completedOrder.value = null

    return order
  }
  function clearOrderFromStorage(orderId: string) {
    localStorage.removeItem(`order-${orderId}`)
  }

  // --- Getters (Computed Properties) ---

  // 1. Total SKU Count (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
  const totalSkuCount = computed(() => items.value.length)

  // 2. Total Quantity (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
  const totalQuantity = computed(() => items.value.reduce((acc, item) => acc + item.quantity, 0))

  // 3. Subtotal (‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á)
  const subTotal = computed(() => items.value.reduce((acc, item) => acc + item.total_item_price, 0))

  // 4. Delivery Fee (‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á)
  const deliveryFee = computed(() => {
    const minimumAmount = mockConfig.config.delivery_fee.minimum_cart_amount
    const feeAmount = mockConfig.config.delivery_fee.delivery_fee_amount

    // ‡∏´‡∏≤‡∏Å Subtotal ‡∏ñ‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ
    if (subTotal.value >= minimumAmount) {
      return 0 // Free Delivery
    }
    return feeAmount
  })

  // 5. Discount (‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ)
  const finalDiscount = computed(() => appliedDiscount.value)

  // 6. Final Total Amount (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢)
  // ‡∏™‡∏π‡∏ï‡∏£: ((Total of all (Product Price x Product Quantity)) ‚Äì Discount) + Delivery Fee
  const finalTotalAmount = computed(() => {
    return subTotal.value - finalDiscount.value + deliveryFee.value
  })

  function getOrderById(orderId: string): OrderDetail | undefined {
    const key = `order-${orderId}` // ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const orderJson = localStorage.getItem(key)

    if (orderJson) {
      try {
        const parsedOrder = JSON.parse(orderJson) as OrderDetail
        return parsedOrder
      } catch (e) {
        console.error(`Failed to parse order ID ${orderId} from localStorage:`, e)
        return undefined
      }
    }

    return completedOrder.value?.orderId === orderId ? completedOrder.value : undefined
  }

  return {
    items,
    promotionCode,
    completedOrder,

    // Computed (Getters)
    totalSkuCount,
    totalQuantity,
    subTotal,
    deliveryFee,
    finalDiscount,
    finalTotalAmount,
    appliedDiscount,

    // Actions/Mutations
    addToCart,
    updateQuantity,
    removeFromCart,
    applyPromotion,
    formatCurrency,
    createOrder,
    getOrderById,
    clearOrderFromStorage,
  }
})
